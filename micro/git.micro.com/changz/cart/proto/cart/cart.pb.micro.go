// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/cart/cart.proto

package go_micro_service_cart

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Cart service

type CartService interface {
	// 添加购物车
	AddCart(ctx context.Context, in *CartInfo, opts ...client.CallOption) (*RespAddCart, error)
	// 清空购物车
	CleanCart(ctx context.Context, in *ReqClean, opts ...client.CallOption) (*Resp, error)
	// 添加购物号商品数量
	IncrCart(ctx context.Context, in *ReqIncr, opts ...client.CallOption) (*Resp, error)
	// 减少购物号商品数量
	DecrCart(ctx context.Context, in *ReqDecr, opts ...client.CallOption) (*Resp, error)
	// 根据购物车id删除
	DeleteCartById(ctx context.Context, in *ReqCartId, opts ...client.CallOption) (*Resp, error)
	// 获取购物车所有商品
	GetAll(ctx context.Context, in *ReqGetAll, opts ...client.CallOption) (*RespGetAll, error)
}

type cartService struct {
	c    client.Client
	name string
}

func NewCartService(name string, c client.Client) CartService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.service.cart"
	}
	return &cartService{
		c:    c,
		name: name,
	}
}

func (c *cartService) AddCart(ctx context.Context, in *CartInfo, opts ...client.CallOption) (*RespAddCart, error) {
	req := c.c.NewRequest(c.name, "Cart.AddCart", in)
	out := new(RespAddCart)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) CleanCart(ctx context.Context, in *ReqClean, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "Cart.CleanCart", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) IncrCart(ctx context.Context, in *ReqIncr, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "Cart.IncrCart", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) DecrCart(ctx context.Context, in *ReqDecr, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "Cart.DecrCart", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) DeleteCartById(ctx context.Context, in *ReqCartId, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "Cart.DeleteCartById", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService) GetAll(ctx context.Context, in *ReqGetAll, opts ...client.CallOption) (*RespGetAll, error) {
	req := c.c.NewRequest(c.name, "Cart.GetAll", in)
	out := new(RespGetAll)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cart service

type CartHandler interface {
	// 添加购物车
	AddCart(context.Context, *CartInfo, *RespAddCart) error
	// 清空购物车
	CleanCart(context.Context, *ReqClean, *Resp) error
	// 添加购物号商品数量
	IncrCart(context.Context, *ReqIncr, *Resp) error
	// 减少购物号商品数量
	DecrCart(context.Context, *ReqDecr, *Resp) error
	// 根据购物车id删除
	DeleteCartById(context.Context, *ReqCartId, *Resp) error
	// 获取购物车所有商品
	GetAll(context.Context, *ReqGetAll, *RespGetAll) error
}

func RegisterCartHandler(s server.Server, hdlr CartHandler, opts ...server.HandlerOption) error {
	type cart interface {
		AddCart(ctx context.Context, in *CartInfo, out *RespAddCart) error
		CleanCart(ctx context.Context, in *ReqClean, out *Resp) error
		IncrCart(ctx context.Context, in *ReqIncr, out *Resp) error
		DecrCart(ctx context.Context, in *ReqDecr, out *Resp) error
		DeleteCartById(ctx context.Context, in *ReqCartId, out *Resp) error
		GetAll(ctx context.Context, in *ReqGetAll, out *RespGetAll) error
	}
	type Cart struct {
		cart
	}
	h := &cartHandler{hdlr}
	return s.Handle(s.NewHandler(&Cart{h}, opts...))
}

type cartHandler struct {
	CartHandler
}

func (h *cartHandler) AddCart(ctx context.Context, in *CartInfo, out *RespAddCart) error {
	return h.CartHandler.AddCart(ctx, in, out)
}

func (h *cartHandler) CleanCart(ctx context.Context, in *ReqClean, out *Resp) error {
	return h.CartHandler.CleanCart(ctx, in, out)
}

func (h *cartHandler) IncrCart(ctx context.Context, in *ReqIncr, out *Resp) error {
	return h.CartHandler.IncrCart(ctx, in, out)
}

func (h *cartHandler) DecrCart(ctx context.Context, in *ReqDecr, out *Resp) error {
	return h.CartHandler.DecrCart(ctx, in, out)
}

func (h *cartHandler) DeleteCartById(ctx context.Context, in *ReqCartId, out *Resp) error {
	return h.CartHandler.DeleteCartById(ctx, in, out)
}

func (h *cartHandler) GetAll(ctx context.Context, in *ReqGetAll, out *RespGetAll) error {
	return h.CartHandler.GetAll(ctx, in, out)
}
