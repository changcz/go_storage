// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/product/product.proto

package git_micro_com_changz_product

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Product service

type ProductService interface {
	// 添加商品
	AddProduct(ctx context.Context, in *ProductInfo, opts ...client.CallOption) (*ProductResponse, error)
	// 根据ID查找商品
	FindProductById(ctx context.Context, in *RequestProductId, opts ...client.CallOption) (*ProductInfo, error)
	// 修改商品
	UpdateProduct(ctx context.Context, in *ProductInfo, opts ...client.CallOption) (*Response, error)
	// 根据ID删除商品
	DeleteProductById(ctx context.Context, in *RequestProductId, opts ...client.CallOption) (*Response, error)
	// 获取所有商品
	FindAllProduct(ctx context.Context, in *RequestProductAll, opts ...client.CallOption) (*ResponseProductAll, error)
}

type productService struct {
	c    client.Client
	name string
}

func NewProductService(name string, c client.Client) ProductService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "git.micro.com.changz.product"
	}
	return &productService{
		c:    c,
		name: name,
	}
}

func (c *productService) AddProduct(ctx context.Context, in *ProductInfo, opts ...client.CallOption) (*ProductResponse, error) {
	req := c.c.NewRequest(c.name, "Product.AddProduct", in)
	out := new(ProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) FindProductById(ctx context.Context, in *RequestProductId, opts ...client.CallOption) (*ProductInfo, error) {
	req := c.c.NewRequest(c.name, "Product.FindProductById", in)
	out := new(ProductInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) UpdateProduct(ctx context.Context, in *ProductInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Product.UpdateProduct", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) DeleteProductById(ctx context.Context, in *RequestProductId, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Product.DeleteProductById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productService) FindAllProduct(ctx context.Context, in *RequestProductAll, opts ...client.CallOption) (*ResponseProductAll, error) {
	req := c.c.NewRequest(c.name, "Product.FindAllProduct", in)
	out := new(ResponseProductAll)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Product service

type ProductHandler interface {
	// 添加商品
	AddProduct(context.Context, *ProductInfo, *ProductResponse) error
	// 根据ID查找商品
	FindProductById(context.Context, *RequestProductId, *ProductInfo) error
	// 修改商品
	UpdateProduct(context.Context, *ProductInfo, *Response) error
	// 根据ID删除商品
	DeleteProductById(context.Context, *RequestProductId, *Response) error
	// 获取所有商品
	FindAllProduct(context.Context, *RequestProductAll, *ResponseProductAll) error
}

func RegisterProductHandler(s server.Server, hdlr ProductHandler, opts ...server.HandlerOption) error {
	type product interface {
		AddProduct(ctx context.Context, in *ProductInfo, out *ProductResponse) error
		FindProductById(ctx context.Context, in *RequestProductId, out *ProductInfo) error
		UpdateProduct(ctx context.Context, in *ProductInfo, out *Response) error
		DeleteProductById(ctx context.Context, in *RequestProductId, out *Response) error
		FindAllProduct(ctx context.Context, in *RequestProductAll, out *ResponseProductAll) error
	}
	type Product struct {
		product
	}
	h := &productHandler{hdlr}
	return s.Handle(s.NewHandler(&Product{h}, opts...))
}

type productHandler struct {
	ProductHandler
}

func (h *productHandler) AddProduct(ctx context.Context, in *ProductInfo, out *ProductResponse) error {
	return h.ProductHandler.AddProduct(ctx, in, out)
}

func (h *productHandler) FindProductById(ctx context.Context, in *RequestProductId, out *ProductInfo) error {
	return h.ProductHandler.FindProductById(ctx, in, out)
}

func (h *productHandler) UpdateProduct(ctx context.Context, in *ProductInfo, out *Response) error {
	return h.ProductHandler.UpdateProduct(ctx, in, out)
}

func (h *productHandler) DeleteProductById(ctx context.Context, in *RequestProductId, out *Response) error {
	return h.ProductHandler.DeleteProductById(ctx, in, out)
}

func (h *productHandler) FindAllProduct(ctx context.Context, in *RequestProductAll, out *ResponseProductAll) error {
	return h.ProductHandler.FindAllProduct(ctx, in, out)
}
